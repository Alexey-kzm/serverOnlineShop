// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 // output = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email String @unique
  name String
  lastname String
  password String
  orders Order[]
  services AdditionalService[]

  @@map("user")
}

model Order{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  address String
  paymentId String @map("payment_id")
  products OrderProduct[]
  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id")

  @@map("order")
}

model OrderProduct{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  productId Int @map("product_id")
  count Int
  mainorder Order @relation(fields: [orderId],references: [id])
  orderId Int @map("order_id")

  @@map("orderproduct")
}

model AdditionalService{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type ServiceType @default(AMBULANCE)
  time DateTime

  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id")

  @@map("additionalservice")
}

enum ServiceType{
  AMBULANCE
  ADOPT
}